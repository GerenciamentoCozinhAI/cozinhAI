// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Atualize o modelo User para incluir o relacionamento com favoritos
model User {
  id        String   @id
  name      String   @db.VarChar(255)
  email     String   @unique @db.VarChar(255)
  avatar    String?
  phone     String? @db.VarChar(20)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  recipes   Recipe[] @relation("UserRecipes")
  likes     Like[]   @relation("UserLikes")
  favorites Favorite[] @relation("UserFavorites") // Relacionamento com favoritos
}

// Atualize o modelo Recipe para incluir o relacionamento com favoritos
model Recipe {
  id          String   @id @default(cuid())
  title       String   @db.VarChar(255)
  description String?  @db.Text
  difficulty  Int @default(5)
  instructions String? @db.Text
  ingredients  Recipe_Ingredients[]
  prepTime    Int?
  servings    Int?
  image       String?
  isGeneratedByAI Boolean? @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userId      String
  user        User     @relation(fields: [userId], references: [id], name: "UserRecipes")
  likes       Like[]   @relation("RecipeLikes")
  favorites   Favorite[] @relation("RecipeFavorites") // Relacionamento com favoritos
}

model Favorite {
  id        String   @id @default(cuid())
  userId    String
  recipeId  String
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], name: "UserFavorites", onDelete: Cascade)
  recipe    Recipe   @relation(fields: [recipeId], references: [id], name: "RecipeFavorites", onDelete: Cascade, onUpdate: Cascade)

  @@unique([userId, recipeId]) // Garante que um usu치rio s칩 pode favoritar uma receita uma vez
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  recipeId  String
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], name: "UserLikes", onDelete: Cascade)
  recipe    Recipe   @relation(fields: [recipeId], references: [id], name: "RecipeLikes", onDelete: Cascade, onUpdate: Cascade)

  @@unique([userId, recipeId]) // Garante que um usu치rio s칩 pode dar um like por receita
}

model Recipe_Ingredients {
  id        String   @id @default(cuid())
  recipeId  String
  ingredientId String
  quantity  Float?
  unit      String? @db.VarChar(50)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  recipe    Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  ingredient Ingredient @relation(fields: [ingredientId], references: [id], onDelete: Restrict)
}

model Ingredient{
  id        String   @id @default(cuid())
  name      String   @unique @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  recipes   Recipe_Ingredients[]
}